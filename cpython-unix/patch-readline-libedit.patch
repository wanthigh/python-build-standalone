diff --git a/Modules/readline.c b/Modules/readline.c
index 1e74f997b07..0c982857283 100644
--- a/Modules/readline.c
+++ b/Modules/readline.c
@@ -35,7 +35,7 @@
 #define completion_matches(x, y) \
     rl_completion_matches((x), ((rl_compentry_func_t *)(y)))
 #else
-#if defined(_RL_FUNCTION_TYPEDEF)
+#ifdef USE_LIBEDIT
 extern char **completion_matches(char *, rl_compentry_func_t *);
 #else
 
@@ -390,7 +390,7 @@ set_completion_display_matches_hook(PyObject *self, PyObject *args)
        default completion display. */
     rl_completion_display_matches_hook =
         readlinestate_global->completion_display_matches_hook ?
-#if defined(_RL_FUNCTION_TYPEDEF)
+#ifdef USE_LIBEDIT
         (rl_compdisp_func_t *)on_completion_display_matches_hook : 0;
 #else
         (VFunction *)on_completion_display_matches_hook : 0;
@@ -511,7 +511,7 @@ set the word delimiters for completion");
 
 /* _py_free_history_entry: Utility function to free a history entry. */
 
-#if defined(RL_READLINE_VERSION) && RL_READLINE_VERSION >= 0x0500
+#ifndef USE_LIBEDIT
 
 /* Readline version >= 5.0 introduced a timestamp field into the history entry
    structure; this needs to be freed to avoid a memory leak.  This version of
@@ -1055,7 +1055,7 @@ flex_complete(const char *text, int start, int end)
 #ifdef HAVE_RL_COMPLETION_APPEND_CHARACTER
     rl_completion_append_character ='\0';
 #endif
-#ifdef HAVE_RL_COMPLETION_SUPPRESS_APPEND
+#ifndef USE_LIBEDIT
     rl_completion_suppress_append = 0;
 #endif
 
@@ -1241,7 +1241,7 @@ readline_until_enter_or_signal(const char *prompt, int *signal)
             PyEval_SaveThread();
             if (s < 0) {
                 rl_free_line_state();
-#if defined(RL_READLINE_VERSION) && RL_READLINE_VERSION >= 0x0700
+#ifndef USE_LIBEDIT
                 rl_callback_sigcleanup();
 #endif
                 rl_cleanup_after_signal();
